# -*- coding: utf-8 -*-
"""
Created on Wed Dec 25 11:31:28 2019

Merry Christmas >.<

@author: CP
"""


# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

from time import sleep
from datetime import date
import datetime
import pandas as pd
from pathlib import Path

import os
import shutil
from hdfs import InsecureClient
hdfs_client = InsecureClient('http://10.16.48.34:50070', user = 'frances')


class TestTest():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_test(self):
     
    #define variables
    cap_date = date.today()
    progress_date = date.today()
    days_covered = 0
    progress_date = cap_date + datetime.timedelta(days_covered)
    dir_path = ("C:\\Users\\CP\\Downloads\\SPYTests\\TXT\\" + str(cap_date))
    filenames = []
    delay = 10
      
    #get website
    self.driver.fullscreen_window();
    self.driver.get("https://www.google.com/flights?hl=en")
    sleep(3)
    
    #input destination
    self.driver.find_element(By.CSS_SELECTOR, ".gws-flights-form__swapper-left").click()
    sleep(1)
    self.driver.find_element(By.CSS_SELECTOR, "input:nth-child(1)").send_keys("Tokyo")
    sleep(1)
    self.driver.find_element(By.CSS_SELECTOR, ".fsapp-option-city-name").click()
    sleep(1)
    
    #check one-way
    self.driver.find_element(By.CSS_SELECTOR, ".gws-flights-form__menu-button-icon > span > svg").click()
    sleep(1)
    self.driver.find_element(By.CSS_SELECTOR, ".mSPnZKpnf91__menu.mSPnZKpnf91__cover-button.mSPnZKpnf91__open > menu-item:nth-child(2) > span").click()
    sleep(1)
    
    #choose date
    self.driver.find_element(By.CSS_SELECTOR, ".flt-input.gws-flights__flex-box.gws-flights__flex-filler.gws-flights-form__departure-input > div.gws-flights__flex-filler.gws-flights__ellipsize.gws-flights-form__input-target").click()
    sleep(1)
    actions = ActionChains(self.driver)
    actions.send_keys(str(progress_date))
    actions.perform()
    sleep(1)
    actions = ActionChains(self.driver)
    actions.send_keys(Keys.ENTER)
    actions.perform()
    
    #exit date (search)
    self.driver.find_element(By.CSS_SELECTOR, ".aFxfpc > g-raised-button > div").click()
    sleep(2)
    
    #direct flight, i.e. no stops
    self.driver.find_element(By.CSS_SELECTOR, ".gws-flights-form__filter-chips-container > div > div > filter-chip:nth-child(2) > span.filter-chip-label").click()
    sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, "#flt-modaldialog > div > div:nth-child(2) > div > ol > li:nth-child(2) > jsl").click()
    sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, ".gws-flights-filter__filter-dialog-close > span > svg").click()
    sleep(1)
    
    while days_covered <= 60:
        
        #attributes
        carrier_list = []
        flight_no = []
        flight_date = []
        depart_time = []
        airports = []
        dep_air = []
        arr_air = []
        capture_date = []
        price_list = []
        class_type = []  
        list_test = []
        
        #class type- Y, PY, C, F
        class_flight = 0
        
        while class_flight <= 3 : 
            
            #add onto flight_date with each iteration
            fl_date = cap_date + datetime.timedelta(days_covered)
            
            self.driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + Keys.HOME)
            sleep(2)
            
            #specify url per class
            if class_flight == 0:
                if days_covered != 0: #or for interruptions: days_covered != number of files created
                    self.driver.find_element(By.CSS_SELECTOR, ".gws-flights__seating_class_dropdown > div > div.gws-flights__white-focus.gws-flights-form__menu-button > span:nth-child(4)").click()
                    sleep(0.75)
                    self.driver.find_element(By.CSS_SELECTOR, ".z6mTee.Zzj1ye.cKItof > div:nth-child(2) > menu-item:nth-child(1)").click()
                    sleep(0.75)
                else:
                    pass
            elif class_flight == 1: #premium economy
                self.driver.find_element(By.CSS_SELECTOR, ".gws-flights__seating_class_dropdown > div > div.gws-flights__white-focus.gws-flights-form__menu-button > span:nth-child(1)").click()
                sleep(0.75)
                self.driver.find_element(By.CSS_SELECTOR, ".z6mTee.Zzj1ye.cKItof > div:nth-child(2) > menu-item:nth-child(2) > span").click()
                sleep(0.75)
            elif class_flight == 2: #business
                self.driver.find_element(By.CSS_SELECTOR, ".gws-flights__seating_class_dropdown > div > div.gws-flights__white-focus.gws-flights-form__menu-button > span:nth-child(2)").click()
                sleep(0.75)
                self.driver.find_element(By.CSS_SELECTOR, ".z6mTee.Zzj1ye.cKItof > div:nth-child(2) > menu-item:nth-child(3) > span").click()
                sleep(0.75)
            elif class_flight == 3: #first class
                self.driver.find_element(By.CSS_SELECTOR, ".gws-flights__seating_class_dropdown > div > div.gws-flights__white-focus.gws-flights-form__menu-button > span.gws-flights-form__menu-button-icon > span > svg").click()
                sleep(0.75)
                self.driver.find_element(By.CSS_SELECTOR, ".z6mTee.Zzj1ye.cKItof > div:nth-child(2) > menu-item:nth-child(4) > span").click()
                sleep(0.75)
            sleep(1)
            
            #check for expand options
            try:
                self.driver.find_element(By.CSS_SELECTOR,
                                         ".gws-flights-results__dominated-toggle").click()
            except:
                pass
            
            #select flights for more information
            if class_flight != 3: #no first class for TPE-Tokyo
                try:
                    expand_element = EC.presence_of_element_located((By.CSS_SELECTOR, ".gws-flights-results__expand"))
                    WebDriverWait(self.driver, delay).until(expand_element)
                    expand_list = self.driver.find_elements(By.CSS_SELECTOR,
                                                        ".gws-flights-results__expand")
                except TimeoutException:
                    print(str(fl_date) + " class " + str(class_flight) + " is empty/ ran out of time")
            else:
                expand_list = self.driver.find_elements(By.CSS_SELECTOR,
                                                        ".gws-flights-results__expand")
            
            for expand in expand_list:
                
                expand.click()
                
                #carrier code and flight no- e.g. CI and CI 53
                fl_no = self.driver.find_elements(By.CSS_SELECTOR,
                                                  ".gws-flights-results__other-leg-info.gws-flights__flex-box.gws-flights__align-center > span")
                for fl in fl_no:
                    flight_no.append(fl.text)
                    fl = str(fl.text)
                    try: 
                        fl = fl.split()[0]
                    except:
                        pass
                    carrier_list.append(fl)
                    
                #flight date
                flight_date.append(fl_date)
                
                #departure time NB. AM/PM- >= 12 (24 hour
                dep_time = self.driver.find_elements(By.CSS_SELECTOR,
                                                     ".gws-flights-results__leg-departure.gws-flights__flex-box.flt-subhead1Normal > div:nth-child(1) > span > span")
                for dep in dep_time:
                    dep = dep.text
                    if ":" in dep:
                        dep = dep.translate({ord(c): None for c in ':'})
                    depart_time.append(dep)
                
                #arrival, departure airports 
                airport = self.driver.find_elements(By.CSS_SELECTOR, 
                                                    ".gws-flights-results__iata-code")
                for air in airport:
                    airports.append(air.text)
                
                #capture_date yyyy-mm-dd
                capture_date.append(cap_date.isoformat())
                
                #flight_type
                if class_flight == 0:
                    class_type.append("Y")
                elif class_flight == 1:
                    class_type.append("PY")
                elif class_flight == 2:
                    class_type.append("C")
                elif class_flight == 3:
                    class_type.append("F")
                
                sleep(1)
                expand.click() #close otherwise next won't work
                sleep(1)
            
            if fl_date not in list_test:
                list_test.append(fl_date)
            if not expand_list and class_flight != 3:
                list_test.append(str(class_flight) + " is empty")
            
            #clean up
            carrier_list = list(filter(None, carrier_list))
            flight_no = list(filter(None, flight_no))
            depart_time = list(filter(None, depart_time))
            airports = list(filter(None, airports))
            
            #airports
            dep_air = airports[::2]
            arr_air = airports[1::2]
            
            #prices
            all_price = self.driver.find_elements(By.CSS_SELECTOR, 
                                                  ".gws-flights-results__price")
            sleep(1)
            
            #numbers only
            del all_price[1::2]
            for price in all_price:
                price = price.text
                price = price.translate({ord(c): None for c in 'NT$,'})
                price_list.append(price)
            
            class_flight += 1
        
        #tester
        if 'Y' in class_type:
            list_test.append("y")
        if 'PY' in class_type:
            list_test.append("py")
        if 'C' in class_type:
            list_test.append("c")
        if 'F' in class_type:
            list_test.append("Google, why")
        print(list_test)
        
        #export out to csv
        df = pd.DataFrame(list(zip(carrier_list, flight_no, flight_date, 
                                   depart_time, dep_air, arr_air, capture_date,
                                   price_list, class_type)), 
                          columns = ["Carrier Code", "Flight Number", 
                                     "Flight Date", "Departure Time", 
                                     "Departure Airport", "Arrival Airport", 
                                     "Capture Date", "Price", "Class"])
        
        path = Path("C:\\Users\\CP\\Downloads\\SPYTests\\TXT\\" + str(cap_date) + "\\" + 
                    str(fl_date) + ".txt")
        path.parent.mkdir(parents= True, exist_ok=True) 
        export_csv = df.to_csv(path, index = False, header=None, sep = '\x01')
        
        #go to next day
        self.driver.find_element_by_tag_name('body').send_keys(Keys.CONTROL + 
                                                Keys.HOME)
        sleep(1.5)
        self.driver.find_element(By.CSS_SELECTOR, ".flt-input.gws-flights__flex-box.gws-flights__flex-filler.gws-flights-form__departure-input > div.gws-flights-form__flipper > span.gws-flights-form__next > span > svg").click()
        sleep(1.5)
        
        #increment loop counter
        days_covered += 1
        sleep(1.5)
    
    # create files list
    for entry in os.scandir(dir_path):
        file_name = 'TXT\\' + str(cap_date) + '\\' + entry.name
        filenames.append(str(file_name))
    
    sleep(2)
    
#    # combine files
#    dest = 'Combo\\' + str(cap_date) + '.txt'
#    with open(dest,'wb') as wfd:
#        for f in filenames:
#            with open(f,'rb') as fd:
#                shutil.copyfileobj(fd, wfd)
#    
#    sleep(2)
#    
#    #upload to hdfs
#    path_name = "C:\\Users\\CP\\Downloads\\SPYTests\\" + dest
#    df = pd.read_csv(path_name)
#    hdfs_path = '/user/frances/data/' + str(cap_date)
#    with hdfs_client.write(hdfs_path, encoding = 'utf8') as writer:
#        df.to_csv(writer, index = None)
    
    self.driver.quit();

foo = TestTest()
foo.setup_method(vars)
foo.test_test()